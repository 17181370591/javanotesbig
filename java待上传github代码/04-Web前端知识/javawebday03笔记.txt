案例1.使用JS完成注册页面的校验
1.JavaScript: 是一门嵌入式编程语言,主要是嵌入到html中
		而且这个语言不需要编译,直接用浏览器就可以运行


回忆:我们学习一门新的编程语言
	常量/变量
	数据类型
	if,switch
	循环for,while
	函数
	事件
	事件和函数绑定

js中的分类:
	ECMAScript：js的核心语法
	BOM:浏览器对象
	DOM:Document Object Model.操作文档中的元素和内容.

2.js必须嵌入到HTML中才能运行
	a.内嵌式:
		必须在一个标签<script>的开始和结束标签之间写
		格式:在HTML写一个标签
		<script type="text/javascript">
			写js代码
		</script>
		
	b.外联式:
		写在另外一个文件,但是文件的后缀必须.js
		在HTML中通过 <script>标签引入刚刚写的js文件
		格式: 假设我们已经写了一个 aa.js的外部js文件
		<script type="text/javascript" src="外部js的路径" charset="utf-8">
			//不能再次写代码
		</script>

3. JS的基本语法:
	变量的命名:和java基本类似
	变量的声明:
		在java中: 数据类型  变量名; int a;
		在JS中: var 变量; //注意: 在js中变量如果没有赋值 默认值 undefined

		赋值:
		   a.定义变量同时赋值  var a = 10;
		   b.先定义后赋值: var a; a=10;a="abc";

	数据类型:
		基本类型:
			a.Undefined 只有一个值 undefined,当定义变量并且不赋值的时候,默认值就是undefined
			b.Null  只有一个值 null,空值,但是在ECMAScript中把他们定义成了相等
			c.Boolean，有两个值 true 和 false 
			d.Number，表示任意数字  1 10000000000 3.13 3.13456732345678
			e.string,表示字符串,在js中字符串必须用""或者''引起来

		引用类型:
			也是一种叫做类(class),但是我们一般不会自己创建对象,而是直接使用
			js已经给我们准备好的对象,
				所以说JS是基于对象 ,而不是面向对象
4.运算符:
	算术运算符和java一模一样
	比较运算符:
		"==":称为值等,只比较两个数据的值,不考虑类型  比如 var a = "10"  a==10,这是true,因为值一样
		"===":称为全等,即比较类型 也比较数值, 比如 var a = "10"  a===10 这是false,因为类型不一样
	逻辑运算符: 与 &&
		    或 ||
	            非 !

5.boolean类型的转换
	其他数据类型转成boolean类型
		undifined和null 转成了false
		+0,-0和NaN 转成了false,其他数值转成了true
		"" 空字符串转成了false,其他转成了true
		"abc" 有内容字符串 转成了true
	boolean类型如果参与运算,那么true转成1 false 转成0

6.js中的一些等式运算(见讲义的表)
		
	
7.js中的一些操作:
	alert(内容/变量); 以消息提示框的形式弹出内容或者变量的值
	js中的函数:
		格式:
		function 函数名(参数列表){
			函数体;
		}
		调用的格式:
		函数名(实际参数);
		注意:
		1.参数列表中 只需要写参数名,如果多个参数用","相隔
		2.函数和java中的方法一样,不调用不运行
		3.函数调用的时候,可以传递任意个实际参数,
			如果实际参数的个数 < 形式参数个数  那么多出来的形式参数默认值undefined
			如果实际参数的个数 > 形式参数个数  那么自动忽略多余的实际参数
		4.js中没有重载这个概念,如果函数名一样,后面定义的函数会覆盖前面定义的函数
			也就说在前面定义的函数相当于没写


8.案例的实现:
	1.当用户点击"submit"按钮时 会发生"表单提交事件",这事件名字 onsubmit事件
	2.要把这个事件 和  一个函数绑定
		所谓的绑定就是 当事件发生 就会调用这个函数
		事件和函数绑定的格式:
			在标签属性中:  事件名称="函数名称()"
	3,如何控制表单提交或者不提交
		a.在绑定的函数中 返回boolean值, true表示提交 false表示不提交
		b.修改标签属性中绑定函数的格式: 事件名称="return 函数名称()"
	4.获取HTML页面的某个标签
		document是DOM中一个内置对象
		var 标签对象 = document.getElementById("标签的id值");
		通过  标签对象.属性名 可以获取该标签的某个属性值
		比如: 标签对象.value,可以获取标签上输入的值
	5.正则表达式:
		js规定,/^正则表达式$/
		var b = "需要判断规则的字符串".matches(/^正则表达式$/);
		如果b是true 满足规则 如果b是false 不满足规则

		
	6.正则表达式扩展:
		a='123@345.22a';c='asd';
		re=/[0-9]+/;re1=/[0-9]+/g;
		"需要判断规则的字符串".matches(/^正则表达式$/);
		/^正则表达式$/.test("需要判断规则的字符串");[推荐]
		
		s.match(re):使用re对s进行查找，返回查找到的字符串的数组，找不到就返回null(???)；
			a.match(re1);					#123,345,22
			a.match(re);					#123
			c.match(re);					#null
			
		re.exec(s):使用re对s进行查找，返回查找到的第一个字符串，找不到就返回null；
			re1.match(a);					#123
			re.match(a);					#123
			re.match(c);					#null	
			
		s.search(re):使用re对s进行查找，返回查找到的第一个字符串的index；
			a.replace(r,'fuck');			#fuck@345.22a
			a.replace(r1,'fuck');			#fuck@fuck.fucka
			
		s.split(re)：用re分割s，将分割的字符串放入数组返回	
			a.split(re1);					#,@,.,a		注意可以匹配3个，所以有4个值，第一个是''
			
		re.test(s)：返回一个boolean，表示能否在s里找到匹配re的子字符串
			re1.test(a);	#true
			re.test(c);		#false
				
		
	7.扩展:
		函数可以这么定义:
		function 函数名(参数){函数体};
			调用: 函数名(实际参数);
		也可以用匿名函数[不推荐]
		var fun1 = function(参数){函数体};
			调用 fun1(实际参数);
			

案例2.轮播图

1.定时器:
	格式:
	window对象是BOM中的内置对象,这个对象又称为全局对象
	window.setInterval(code,millisec);
		code:代码段
			a. "正常js代码"
			b. 函数名
		millisec:时间间隔,单位是毫秒	
	代表:设置一个定时器,这个定时器每隔millisec毫秒会触发一次,每次都会执行code代码段
	
	window对象可以不写,直接调用setInterval方法也可以,但是不建议不写



2.页面加载事件:
	window.onload事件,当页面加载完毕之后才会触发
	给页面加载事件绑定函数:
		方式一:
		window.onload = 函数名;
		function 函数名(){
			设置定时器
		}
		方式二:
		window.onload = function(){
			设置定时器
		}

案例3.定时弹广告

1.定时器:
	设置定时器
	返回一个id值:setInterval(code,毫秒值);//周期定时器,反复周期执行
	返回一个id值:setTimeout(code,毫秒值);//一次性定时器,只会执行一次
	取消定时器:
	clearInterval(你要取消的定时器的id);//取消周期定时器
	clearTimeout(你要取消的定时器的id);//取消一次写定时器
	

2.修改标签的样式属性值
	obj.style.属性		，获得指定“属性”的值。
	obj.style.属性=值	，给指定“属性”设置内容。

	在练习中注意:
		获取某一个样式的值的时候,一定要注意是什么类型的  比如说style.height 是 字符串类型 "100px"



案例4.完善注册表单校验

1.获取HTML某个标签的内容
	标签对象.innerHTML 获取到该标签的内容,开始标签和结束标签之间的都是内容

2.有关事件:
	1.onsubmit: 提交按钮点击后 触发的表单提交事件
	2. onblur: 失去焦点事件,本来鼠标是选择该标签的,然后选中了别的标签的时候
	3. onfocus: 获取焦点事件,本来鼠标是选择别的标签,然后选中了该标签

扩展:
1.BOM: 浏览器对象
	a.window对象, 全局函数 setInterval setTimeout, onload
		alert();//提示信息弹出框
		confirm()://提示信息框(具有确定和取消按钮),当你点击确定时返回true,当你点击取消时返回false
		prompt()://可以输入信息的提示框(具有确定和取消按钮),当你点击确定时,返回您输入的信息
				当你点击返回时,返回null

	b.navigator: 导航
	c.screen:屏幕对象
	d.history:浏览记录对象
	e.location:当前浏览的网页地址


