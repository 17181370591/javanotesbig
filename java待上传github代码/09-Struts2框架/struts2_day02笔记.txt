	 
					 struts2_02


今日内容介绍:
		

		
		

今日案例:
	  客户信息列表的查询(昨天做的)
	  客户信息的保存













1 strtus2对servlet API的访问

		 1  使用ServletActionContext类的静态方法(重要)
						
				
			


		 2  使用ActionContext对象的方法(理解)  
					

				
					
		 
		 3  实现特定的接口来获取的方法(了解)
					

				  
				 
				  
				  
				  
				  
				  
				  
				  
				  关注点: action是多实例还是单实例?
							单实例: 这个类只能创建一个对象
							多实例: 这个类可以创建多个对象

					  serlvet是单实例还是多实例?
							单实例
				
					
					线程危机:
						  成员属性是不共享数据
						  多个线程如果操作的是共享数据 那就有线程危机
						  如果每个线程操作的都是自己的数据 那就不存在线程危机
				
					线程危机:
					如果是多个线程操作同一个对象 那这个对象的成员属性就是共享数据 有线程危机

					如果是多个线程操作都是不用对象 那每个对象的成员属性就不是共享数据 没有线程危机

					判断:当前被访问的action是否是单实例还是多实例?
						
						servlet是单实例还是多实例?
								单实例 所有servlet的成员属性是有线程危机

						action是多实例的
							证明: 使用无参构造器  cn.itcast.action.ActionDemo3 反射用的就是无参构造器
				
						
						面试题: servlet是单实例还是多实例 ,action是单实例还是多实例?
							servlet是单实例的 用的同一个对象 init只执行一次  成员属性是有线程危机的
							action是多实例的 反射一次创建一次 成员属性是没有线程危机
				
				
				

				





///////////////////////////////////////////////////////////////////////////////////////////////////





2 结果页面的逻辑视图配置
		分类:
			全局配置 <global-results><result></result></global-results>
				针对一个包下所有的action都生效的一个页面
			
			局部配置
				针对某一个action生效的一个页面

			
			注意:如果全局配置和局部配置都配置了,局部配置的优先级大于全局配置

			
			

		result: 为action返回的逻辑视图名进行页面的匹配
			name:
				匹配action返回的逻辑视图名  
				如果返回的是success 可以不写
				如果是别的 一定得写上
				默认值:success
			
			type: 类型 
				dispatcher  默认值  请求转发 (请求转发到页面)
				redirect 重定向 (重定向到页面)
				
				chain 请求转发 (请求转发到action)
				redirectAction 重定向 (重定向到action)

				
				








			name:
				逻辑视图的名称。默认值是success。


			
				dispatcher  默认  请求转发(用于转发到jsp页面)

				redirect   重定向(用于重定向到jsp页面)

				chain     请求转发(用于转发到action)

				redirectAction  重定向(用于重定向到action)

				




///////////////////////////////////////////////////////////////////////////////////////////////

3 struts2对页面数据的封装(属性封装  模型封装  复杂类型封装(list,map))

		以前的方式:
			   Map<String, String[]> map= request.getParameterMap();
			   User user=new User();
			   beanUtils.populate(user,map)---->那map的key和对象的属性匹配
							    匹配成功使用set属性的方法将map的value封装给实体

			   调用service,传递参数.... 




		属性封装:
			会拿页面的参数名称和action的属性名匹配
			匹配成功 会自动调用set方法进行赋值


			
			基本类型和String类型:
				条件:
					1 需要有成员属性
					2 需要有set方法


			对象类型: 掌握
				条件: 
					1 需要有成员对象
					2 需要set/get方法
					3 页面需要用ognl表达式 对象.属性
	

			复杂类型封装: 
			
				条件:
					1 需要一个集合 
					2 有set/get方法即可
					3 页面需要有特定的写法
						
					list:
						list[0].属性名


					map: 
						map[键名].属性名
			


		
		
		
		模型封装: 掌握
			条件:
				1 需要有成员对象 而且还得实例化这个对象

				2 需要实现一个接口 ModelDriver

				3 需要提供一个getModel方法

				4 将对象以getModel进行返回


		


		
		
		
		   基本类型和String类型:
			条件:
				1 在action的成员位置上需要设置属性,且给set方法


		    对象类型:
			条件:  

				1 在action的成员位置上需要声明对象,且给set/get方法
						例如:private User user;  get()/set()
				
				2 页面name属性上要写ognl表达式 对象.属性的方式
						例如: name="user.username"
						      name="user.age"
						

 
		模型驱动封装   封装对象   针对的是单一的对象的数据封装
			条件:
				1 需要在action成员位置上声明对象,且这个对象要初始化 private User=new User()

				2 需要实现一个接口:ModelDriver

				3 需要实现这个接口中的getModel方法

				4 在getModel方法中,将初始化的对象以返回值的方式返回


		
		批量方式封装  封装多个单一的对象数据
			条件: 在action的成员位置上必须得有一个集合 切提供set/get方法


			list:
				在aciton中: list

				在页面: list[0].属性名
					list[0].属性名
					list[1].属性名
					list[1].属性名
					list[2].属性名
					list[2].属性名



			map:
				在aciton中: map


				在页面:
					map['键名'].属性名
	






				

				

				

				
 				
				
 全xml配置
	spring_05_xml(终极版)


 注解+xml方式
	spring_05_annotation(终极版)


		
 crm: 注解+xml方式			