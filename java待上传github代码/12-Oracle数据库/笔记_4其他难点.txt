--=====================================pl/sql
/*
PLSQL定义：在数据库服务器上保存的大段可执行方法，供其他开发人员进行调用
PLSQL语法：
[declare]  --定义部分：变量，引用变量，记录型变量，异常
begin
[exception]  --需要捕获异常时写上
end
*/


--定义number变量，定义PI常量，定义记录型变量，定义引用型变量
declare 
             i number :=1;
             pjob varchar(55):='pjob1';
             pi constant number:=3.14;
             pemp emp%rowtype;        --定义emp的rowtype类型的记录型变量
             pname emp.ename%type;    --定义引用型变量
begin
             select * into pemp from emp where empno=7499;
             select ename into pname from emp where empno=7499; 
             select 'pjob=='||ename into pjob from emp where empno=7499; 
             update emp  set ename=ename||'1' where empno=7499;
             dbms_output.put_line(pi+i||'----'||pjob);  
             --pi:=pi+1   ;       会报错，因为pi是常量  
             dbms_output.put_line('员工编号：'||pemp.empno||
             '，员工姓名：'||pemp.ename);     
             dbms_output.put_line('员工姓名：'||pname); 
              
             dbms_output.put_line(pjob);         --普通变量也可以这么赋值
--可以发现变量设置完成后，修改表变量数据不变
end;

select * from emp for update      --可以在查询结果里修改表，需要先打开锁
--=======================================if分支
/*
if判断分支语法：
begin
  if 判断条件 then
  elsif 判断条件 then
  else
  end if; 
end;
*/
--从控制台输入一个数字，如果数字是1，则输出我是1
declare
  age number:=&age;
begin
  if age=1 then dbms_output.put_line('i am'||age);
  else dbms_output.put_line('i am sb\t'||age);
  end if;
end;
--如果输入的年龄在18岁以下，输出未成年人，18~40：成年人，40以上 老年人
declare
  age number:=&age;
begin
  if age<18 then dbms_output.put_line('未成年人 '||age);
  elsif age>18 and age<40 then dbms_output.put_line('成年人 '||age);
  else dbms_output.put_line('老年人 '||age);
  end if;
end;

--===========================================loop 循环
/*
loop循环
语法1：
begin
  while 循环条件 loop
  end loop;
end;
语法2：(常用)
begin
  loop
    exit when 退出条件
  end loop;
end;
语法3:
begin
  for i in 1..10 loop
  end loop;
end;
                                          
*/
--语法1实现在控制台输出1~10
declare a number:=1;
begin
      while a<=10 loop
            dbms_output.put_line(a);
            a:=a+1;
      end loop;
end;
--语法2实现在控制台输出1~10(掌握)
declare a number:=1;
begin
        loop
          exit when a>10;
          dbms_output.put_line(a);
          a:=a+1;
        end loop;
end;
--语法3实现在控制台输出1~10
begin
  for a in 1..10 loop
    dbms_output.put_line(a);
  end loop;
end;
--====================================================光标（游标）
/*
光标:指定记录集，可抓取记录集中的记录
语法：cursor 游标名 is select查询语句
   270行有另一种写法
提取游标：
open 游标名;
  loop
     fetch 游标名 into 记录型变量
     exit when 游标名%notfound;
  end loop;
close 游标名;
*/
--使用光标输出emp表中7369的员工信息
declare
  cursor u(uu number) is select * from emp where empno=uu;
  jl emp%rowtype;
begin
  open u(7369);
    loop
       fetch u into jl;
       exit when u%notfound;
       dbms_output.put_line(jl.empno);
    end loop;
  close u;
end;
--输出指定部门的员工信息
declare
  cursor u(uu number) is select * from emp where deptno=uu;
  jl emp%rowtype;
begin
  open u(10);
    loop
       fetch u into jl;
       exit when u%notfound;
       dbms_output.put_line(jl.empno);
    end loop;
  close u;
end;
select * from emp ;
--给部门编号为10 的员工涨工资
declare
  cursor u(uu number) is select * from emp where deptno=uu;
  jl emp%rowtype;
begin
  open u(10);
    loop
       fetch u into jl;
       exit when u%notfound;
       update emp set comm=nvl(comm,0)-1 where empno=jl.empno;
    end loop;
  close u;
end;
select * from emp where deptno=10;
--或者
declare
  cursor u(uu number) is select * from emp where deptno=uu;
  jl emp%rowtype;
begin
  open u(10);
  fetch u into jl;
  update emp set comm=nvl(comm,0)-1 where deptno=jl.deptno;
  close u;
end;
--=====================================例外（异常） 
--系统异常，被0除的zero_divide异常
declare
  i number:=1;
begin 
  i :=1/0;
exception
   when zero_divide then
     dbms_output.put_line('not 0');
end;
--系统异常，设置错误的value_error异常
declare
  i number;
begin 
  i :='a';
  dbms_output.put_line(i);
exception
   when zero_divide then
     dbms_output.put_line('not 0');
   when value_error then
     dbms_output.put_line('value_error');
end;

declare
  i varchar(9);
begin 
  i :=1;
  dbms_output.put_line(i);
exception
   when zero_divide then
     dbms_output.put_line('not 0');
   when value_error then
     dbms_output.put_line('value_error');
end;
--系统异常，都可以通过others异常捕获

--自定义异常，查询部门编号为40员工（自定义exception）
declare
     e exception;
begin 
  raise e;
exception
  when others then dbms_output.put_line('error');
end;
--==============================================存储过程（过程）
/*
定义：保存一段可执行的sql语句，方便开发调用过程名
              有两种写法，第二种写法貌似更好
语法：
create [or replace] procedure 过程名(参数  in|out number)
as
begin
end;
*/

--声明pro_add_sal存储过程,作用是给指定员工涨1000工资,并打印出涨前和涨后工资

--第一种
create or replace procedure p(pno in number) as totalSal number;
begin
  select sal into totalSal from emp where empno=pno;
  dbms_output.put_line('totalSal='||totalSal);
end;

begin             --执行过程
  p(7499);
end;

select * from emp where empno=7499;

--第二种
create or replace procedure p2(pno in number,totalSal out number) as
begin
  select sal into totalSal from emp where empno=pno;
  dbms_output.put_line('totalSal='||totalSal);
end;

declare
  total number;
  pemp emp%rowtype;
begin
  p2(7499,total);
  dbms_output.put_line('total='||total);
end;
--================================================存储函数
/*
定义：保存一段可执行的sql语句，方便开发调用过程名
语法：
create [or replace] function 方法名(参数 in|out number) return 参数类型
as
 定义变量名  类型要和return返回类型一致
begin
  return 变量名;
end;
*/

--声明pro_emp_totalsal存储过程,查询指定员工的年薪
create or replace procedure p1(pno in number) as total number;
begin
  select (12*sal)+nvl(comm,0) into total from emp where empno=pno;
  dbms_output.put_line('total='||total);
end p1;

declare 
  total number;
begin             --执行过程
  p1(7499);
end;



--声明fun_emp_dname存储函数,根据部门编号查询出部门名称
create or replace function f(pno in number) return varchar2 is
       n varchar2(22);
begin
  select dname into n from dept where deptno=pno;
  return n;
end;
  
declare d varchar2(22); 
begin
  d:=f(10);
  dbms_output.put_line('d='||d);
end;

select ename,f(deptno) from emp;


--在select 调用存储函数


/*
存储过程与存储函数的区别：
1.定义的语法不一样procedure,function
2.function有返回值
3.function可以在select中进行调用
4.存储过程可以通过out类型来返回参数
*/

---存储过程根据部门编号返回员工
create or replace procedure pel(dno number,emplist out sys_refcursor) as
begin
  open emplist for select * from emp where deptno=dno;
end;

declare
  emplist sys_refcursor;
  pemp emp%rowtype;
begin
  pel(10,emplist);
       loop
          exit when emplist%notfound;        
          fetch emplist into pemp;
          dbms_output.put_line('pemp='||pemp.ename);
       end loop;
  close emplist;
end;
--=======================================使用jdbc访问oracle对象（掌握）
--导入Oracle10g驱动包  ojdbc14

详细js代码见Test1.java

--==========================================触发器
/*
触发器：满足一定设定的触发条件，立即执行

语法：create [or replace] trigger 触发器名
before|after
insert|update|delete
on 表名
for each row  --:new,:old
begin
end;

*/

--添加一个员工后打印一句话“一个新员工添加成功”
create or replace trigger tri_add
after insert on emp 
begin 
  dbms_output.put_line('add one');
end;

insert into emp(empno) values(112); 
select * from emp
--不能在休息时间办理入职
/*
raise_application_error(参数1，参数2);
参数1：错误代码 在 -20001~  -20999‘
参数2：提示错误信息
*/
create or replace trigger tri_add3
before update on emp 
begin 
  if to_char(sysdate,'mmdd')='1103' then raise_application_error(-3,'b');
  end if;
end;



--不能给员工降薪
--使用:new，:old就必须加 for each row
create or replace trigger tri_add2
before update on emp for each row
begin 
  if :new.sal<:old.sal then raise_application_error(-2,'a');
  end if;
end;

select * from emp where empno=7499;
update emp set sal=sal+1 where empno=7499;
--触发器应用（通过序列在插入数据的时候，将ID用序列赋值）
create or replace trigger tri_add1
before insert on emp for each row
begin 
  select s.nextval into :new.empno from dual;
end;