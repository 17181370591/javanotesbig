权限控制：

在jsp里加入如下代码，可以实现：拥有某权限才能看到某些功能，但只是看不到，
如果知道该功能的地址依旧能够访问并使用该权限。
<%@ taglib uri="http://shiro.apache.org/tags" prefix="shiro" %>

	 <!-- 当jsp页面碰到shiro标签时就执行AuthRealm中授权方法 -->
    <shiro:hasPermission name="系统首页">
	<span id="topmenu" onclick="toModule('home');">系统首页</span><span id="tm_separator"></span>
	</shiro:hasPermission>
	<shiro:hasPermission name="货运管理">
		<span id="topmenu" onclick="toModule('cargo');">货运管理</span><span id="tm_separator"></span>
	</shiro:hasPermission>
	<shiro:hasPermission name="统计分析">
	<span id="topmenu" onclick="toModule('stat');">统计分析</span><span id="tm_separator"></span>
	</shiro:hasPermission>
	<shiro:hasPermission name="基础信息">
	<span id="topmenu" onclick="toModule('baseinfo');">基础信息</span><span id="tm_separator"></span>
	</shiro:hasPermission>
	<shiro:hasPermission name="系统管理">
	<span id="topmenu" onclick="toModule('sysadmin');">系统管理</span>
	</shiro:hasPermission>  
===========================================================================
通过权限可以限制访问方法1：过滤器链（这个方法似乎比注解好）
		<property name="filterChainDefinitions">
            <value>
				/sysadmin/deptAction* = perms["部门管理"]
				/sysadmin/userAction* = perms["系统管理"]
            </value>
//上面表示有 部门管理 才能访问dept，有 系统管理才能访问 user。
===========================================================================
通过权限可以限制访问方法2：注解：
	在相应的service层写注解，没有该权限访问该功能会报错。代码如下：
	@Override
	@RequiresPermissions("模块管理")
	public Page<Module> findPage(Specification<Module> spec, Pageable pageable) {
		// TODO Auto-generated method stub
		return dd.findAll(spec, pageable);
	}
===========================================================================
上面都依赖下面的代码：
package cn.itcast.web.action.shiro;

import java.util.List;
import java.util.Set;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.realm.SimpleAccountRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import cn.itcast.domain.Module;
import cn.itcast.domain.Role;
import cn.itcast.domain.User;
import cn.itcast.service.UserService;

public class AuthRealm extends AuthorizingRealm{
@Autowired
private UserService us;
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection arg0) {
		System.out.println("授权");
		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
		User user=(User)arg0.getPrimaryPrincipal();
		Set<Role> roles = user.getRoles();
		for(Role role:roles){
			//modules就是该user的权限列表
			Set<Module> modules = role.getModules();
			for(Module module:modules){
				info.addStringPermission(module.getCpermission());
			}
		}
		//这里的sos就是权限列表
		Set<String> sos = info.getStringPermissions();
		System.out.println("---授权的SOS="+sos);
		return info;
	}

	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken arg0) throws AuthenticationException {
		System.out.println("认证");
		System.out.println("authrealm arg0="+arg0);
		UsernamePasswordToken up=(UsernamePasswordToken)arg0;
		final String ss=up.getUsername();
		Specification<User> spec = new Specification<User>() {
			@Override
			public Predicate toPredicate(Root<User> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				return cb.equal(root.get("userName").as(String.class), ss);
			}
		};
		List<User> lu=us.find(spec);
		System.out.println(ss+"\tauthrealm lu="+lu);
		if(lu.size()>0){
			User u1 = lu.get(0);
			return new SimpleAuthenticationInfo(u1,u1.getPassword(), getName());
		}
		return null;
	}

}
