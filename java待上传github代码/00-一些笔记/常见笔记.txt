源码里汉字乱码(这个可能导致源码报错)：
windows--->Perfences-->general-->content types-->text-->java source file
-->default encoding(utf-8/gbk)-->update-->ok

====================================================================

开启多个tomcat7.0，复制tomcat软件，删除webapps的项目，修改conf/server.xml，
把所有端口修改(+1000)，在myeclipse添加tomcat7即可。


====================================================================

报错ClassNotFoundException: org.springframework.web.context.ContextLoad...:
https://www.cnblogs.com/aisam/articles/4686362.html
运行某项目时报错。工程WEB-INF目录下自动生成了lib目录，但没有jar包。
Properties-->Deployment Assembly-->Add-->Java Build Path Entries
-->Next-->Maven Dependencies-->Finish，然后可以看到已经把Maven Dependencies添加到Web应用结构中了。
在web项目中一般都需要将java文件以及资源文件发布到指定位置，其中deployment assembly的作用就在于此。如图web_Deployment_Assembly.jpg，
图表示java下的源码，resouce下的配置文件放在web-inf/classes里，
maven导入的jar放在web-inf/lib，其他放在根目录。

====================================================================

随便打开一个项目，点击项目里面的xml文件，然后返回重新创建maven工程，
use default workspace此时就变为空了。

====================================================================

  <listener>
      <listener-class> org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
       <param-name>contextConfigLocation</param-name>
       <param-value>classpath:applicationContext*.xml</param-value>
  </context-param>
  这样设置可以加载满足条件的applicationContext*.xml，
  不用再在applicationContext.xml里写
  <import resource="classpath:spring/applicationContext-ws.xml"/>。
  
====================================================================
maven项目里，web模块的classpath:applicationContext.xml里写<import resource="classpath:applicationContext-redis.xml"/>，
可以读取其他模块下src/main/resouce里的xml。

====================================================================

将jar包保存到mavben本地仓库：
在jar包所以在的路径cmd，运行下面代码，
		mvn install:install-file -DgroupId=com.aliyun -DartifactId=aliyun-java-sdk-dysmsapi -Dversion=1.0.0-SNAPSHOT -Dpackaging=jar -Dfile=aliyun-java-sdk-dysmsapi-1.0.0-SNAPSHOT.jar

		mvn install:install-file -DgroupId=com.aliyun -DartifactId=aliyun-java-sdk-core -Dversion=3.2.3 -Dpackaging=jar -Dfile=aliyun-java-sdk-core-3.2.3.jar
即可导入。然后按对应路径引用即可。
		<!-- 阿里大于 -->
		<dependency>
			<groupId>com.aliyun</groupId>
			<artifactId>aliyun-java-sdk-core</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>com.aliyun</groupId>
			<artifactId>aliyun-java-sdk-dysmsapi</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
导入jar包后可能还是提示找不到，删除搜索即可。
		
====================================================================

action不返回页面，即相应ajax,返回图片等return null时，回显无效，
因为回显数据在返回页面的。还有每次单独的请求都会使用新的action，
所以前一个action设置的私有属性的值，在下一个方法中无法获取。
例如注册页面，一个action获取验证码并回写到注册页面/显示到注册页面，
然后提交时会使用另一个action，无法校验，常用方法是放session或redis里。

====================================================================

maven主项目导的包，每个子模块都能用。子模块之间的依赖需要在pom里设置引用。

运行子模块时，子模块的applicationContext*.xml配置文件要配置各自的，
例如web子模块已经配置完成，与jms模块无关，jsm模块要在自己的web.xml配置，
最好是配置applicationContext*.xml，这样如果jms在pom引用了cache模块，
那么运行jsm也会在加载cache的xml文件，否则要在jsm的applicationContext.xml里写import。

====================================================================

ajax的type:post请求，data可以用和python一样的字典，
也可以换get方法把参数用=和&拼接起来放url后面。

====================================================================
