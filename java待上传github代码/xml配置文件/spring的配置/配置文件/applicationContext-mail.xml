<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       
	xmlns:p="http://www.springframework.org/schema/p"  
	xmlns:context="http://www.springframework.org/schema/context"   
	xmlns:tx="http://www.springframework.org/schema/tx"  
	xmlns:aop="http://www.springframework.org/schema/aop"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
	http://www.springframework.org/schema/aop    
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd    
	http://www.springframework.org/schema/tx    
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd    
	http://www.springframework.org/schema/context    
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<description>mail</description>

	<context:property-placeholder location="classpath:mail.properties"/>
	
	
	<!-- SimpleMailMessage只能发送文本内容等，这个最好自己创建不由spring管理，
		因为可能发很多个，不应该使用singtone的对象 --> 
	<bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage">  
        <property name="from">  
			<!--${mail.from}和${mail.username}都是发送者的邮箱地址 -->
            <value>${mail.from}</value>  
        </property>         
    </bean>  
	
    <!-- 申明JavaMailSenderImpl对象 -->  
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">  
        <property name="defaultEncoding" value="UTF-8" />  
        <property name="host" value="${mail.host}" />  
        <property name="username" value="${mail.username}" />  
        <property name="password" value="${mail.password}" />  
        <property name="javaMailProperties">  
            <props>  
                <!-- 设置认证开关 -->  
                <prop key="mail.smtp.auth">true</prop>  
                <!-- 启动调试开关 -->  
                <prop key="mail.debug">true</prop>  
                <!-- 设置发送延时 -->
                <prop key="mail.smtp.timeout">0</prop>
            </props>  
        </property>  
    </bean>  	
</beans>


  <!-- 
发送邮件的代码：
	@ContextConfiguration(value = "classpath:applicationContext-mail.xml")
	@RunWith(value = SpringJUnit4ClassRunner.class)
	public class SpringJunit {
		@Autowired
		private SimpleMailMessage mm;
		@Autowired
		private JavaMailSender sender;

		@Test
		public void test1() {
			mm.setTo("yukitosairi5@163.com");
			mm.setSubject("subject");
			mm.setText("test text");
			sender.send(mm);
		}
		
		
	//发送了  带html标签文本和 本地图片(直接显示)和 本地文件
	@Test
	public void test1() throws MessagingException {
		MimeMessage message = sender.createMimeMessage();
		
		// 带图片带附件必须设置true，类似post表格要设置multipart
		MimeMessageHelper helper = new MimeMessageHelper(message, true); 
		helper.setFrom("17727462455@163.com");
		helper.setTo("yukitosairi5@163.com");
		helper.setSubject("200张图片的附件");

		// true代表前面的文本可以当成html标签进行解析
		//cid:image11的image11和下面图片附件的第一个参数必须一样
		helper.setText(
				"<html><head></head><body><h1>hello!!spring image html mail</h1><a href=http://www.baidu.com>baidu</a><img src='cid:image11' /></body></html>",
				true);

		// 添加了一个图片的附件
		helper.addInline("image11", new FileSystemResource(new File("E:/1.jpg")));

		// 添加附件，可以看到收到的邮件附件名字就叫11.jpg和22.jpg
		helper.addAttachment("11.jpg", new FileSystemResource(new File("E:/1.js")));
		helper.addAttachment("22.jpg", new FileSystemResource(new File("E:/1.jpg")));


		sender.send(message);
	}
	}
-->