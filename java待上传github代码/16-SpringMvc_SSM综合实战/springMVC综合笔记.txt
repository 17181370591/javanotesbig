超重要：：
controller方法里可以自己定义接收类型，前端代码如下，selectIds是个数组，
i是字符串还是数组我也不知道，不过理论上通过页面传送肯定是字符串。
url里selectIds应该也会转成字符串。这里也可以用get方法。
	
	this.updateGoodsStatus=function(selectIds,i){
		return $http.post('../goods/updateGoodsStatus?selectIds='+selectIds+'&i='+i);
	}  

下面是后台代码。测试发现这三个方法都可以用，当然形参名字不能改！！
方法1用Long数组接收selectIds，可以发现接收到的确实是java的Long数组；
方法2用String数组接收selectIds，再转Long数组也没问题。所以接收到的确实是java的String数组；
方法3用字符串接收selectIds也没问题。
这说明url里selectIds被转成了  149187842867913,149187842867914  ，所以后台接收时可以自由处理。
f12里也可以发现地址确实是这样的，地址如下
http://localhost:8080/goods/updateGoodsStatus?selectIds=149187842867913,149187842867914&i=2


	@RequestMapping("/updateGoodsStatus")
	public PygResult updateGoodsStatus(Long[] selectIds,String i){		
		System.out.println(selectIds+"\t"+Arrays.toString(selectIds));	
		//[Ljava.lang.Long;@1417b1d5	[149187842867912, 149187842867921]
		return goodsService.updateGoodsStatus(selectIds,i);		
	}
	
	@RequestMapping("/updateGoodsStatus")
	public PygResult updateGoodsStatus(String[] selectIds,String i){
		Long[] selectIds1=new Long[selectIds.length];
		for(int j=0;j<selectIds.length;j++){
			selectIds1[j]=Long.parseLong(selectIds[j]);
		}
		return goodsService.updateGoodsStatus(selectIds1,i);		
	}
	
	@RequestMapping("/updateGoodsStatus")
	public PygResult updateGoodsStatus(String selectIds,String i){
		System.out.println("--------------------------------"+selectIds);
		//149187842867912, 149187842867921
		String[] selectIds2 = selectIds.split(",");
		Long[] selectIds1=new Long[selectIds2.length];
		for(int j=0;j<selectIds2.length;j++){
			selectIds1[j]=Long.parseLong(selectIds2[j]);
		}
		return goodsService.updateGoodsStatus(selectIds1,i);		
	}

==========================================================================================

controller层绑定参数：
HttpServletRequest，HttpServletResponse，HttpSession，Model/ModelMap

		@RequestMapping("/itemEdit")
		public String itemEdit(HttpServletRequest request, Model model) {
			String strId = request.getParameter("id");
			Integer id = new Integer(strId);
			Items items = itemService.getItemById(id);
			
			model.addAttribute("item", items);
			return "editItem";
			
			//创建ModelAndView
			//ModelAndView modelAndView = new ModelAndView();
			//向jsp传递数据
			//modelAndView.addObject("item", items);			
			//设置跳转的jsp页面
			//modelAndView.setViewName("editItem");
			//return modelAndView;			
		}

绑定简单类型
当请求的参数名称和处理器形参名称一致时会将请求参数与形参进行绑定。从Request取参数的方法可以进一步简化。
	@RequestMapping("/itemEdit")
	public String itemEdit(Integer id, Model model) {
		Items items = itemService.getItemById(id);
		model.addAttribute("item", items);
		return "editItem";
	}
	
使用pojo接收表单数据
要求pojo对象中的属性名和表单中input的name属性一致。即如果提交数据有name和pw，那么pojo也要有这两个属性。

使用包装的pojo接收表单数据
页面要传user的order的id过来，直接用id=?的话会直接找user的id，所以要用order.id=?来传(如果用表单就是name='order.id')。

	@RequestMapping("/itemEdit")
	public String itemEdit(User user) {
		System.out.println(user.getOrder().getId());
		return "editItem";
	}

接收数组和List：
数组直接用参数，List需要用包装的POJO，即POJO里有List的属性。页面传的属性的name写成list[索引].属性，一般不直接传List。	
	
==========================================================================================

@RequestMapping里的action可以写可以不写。
@RequestMapping(value={"/a","/b"},method={RequestMethod.POST,RequestMethod.GET})表示/a和/b都走这个方法，且只接收post和get请求，@RequestMapping("/c")也可以注释在类上，表示这个类的方法只能接收/c/x，/x是注释在方法上的。

==========================================================================================

页面传来的日期是string格式，需要转换成date格式，可以手动转，还可以用@DateTimeFormat
方法是在pojo类上的日期属性加上此注解，这样会把页面传来的1999-01-02 12:12:12转成date
	@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private Date symstarttime;

==========================================================================================

查询多用blobs，因为可能遇到这样的bug：
某字段明明有值，查询数据库却是null。看了源码发现，该字段是长文本，
用selectByExample会不搜索长文本，用selectByExampleWithBLOBs才行。update时一般只能用selective，因为这个会提交null值

==========================================================================================


参数传递错误会报错The request sent by the client was syntactically incorrect，
对象的普通类型的参数(目前知道int,string,folat等)的数组在QueryVo可以封装数组传递(不封装该对象)，
传递date数组时报上面的错(似乎是因为进行了String和Date的转换)，目前已知的解决办法是用教程的方法，
在Query封装该对象的数组，并且jsp的name使用序号。例如：
items对象有name和date，QueryVo里要封装List<Items> ls，jsp里写ls[${status.index}].date。

==========================================================================================

contoroller里面可以写如下代码，但是比较麻烦一般不用，因为完全可以用return editItem代替。
	@RequestMapping("/itemEdit")
	public void editItem(@RequestParam(value="id") int iid,Model model,
			HttpServletRequest r,HttpServletResponse s) throws ServletException, IOException{
		Items i = itemService.findByID(iid);
		r.setAttribute("item",i);
		r.getRequestDispatcher("/WEB-INF/jsp/editItem.jsp").forward(r, s);
	}

==========================================================================================

上传文件配置：

1、导包：<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		
2、在springMVC.xml里配置文件解析器
	 <!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>
	
3、上传代码如下，pictureFile必须和表单的<input type="file"  name="pictureFile"/> 一一对应，可能报错MultipartFile Specified class is an interface，MultipartFile前加上@RequestParam可以解决。
	@RequestMapping("/updateitem")
	public String updateitem(MultipartFile pictureFile) throws Exception{
		String ss=pictureFile.getOriginalFilename();
		int lastIndexOf = ss.lastIndexOf(".");
		String s1=UUID.randomUUID().toString();
		ss="d:/up/"+s1+ss.substring(lastIndexOf);
		
		//保存文件
		pictureFile.transferTo(new File(ss));
		return "redirect:list.action";		
	}
	
	
ajax请求不能上传文件，所以不能用MultipartFile pictureFile，不然会报错表单不是multipart，当时没注意，以为老师的代码用ajax上传文件，一直试图模仿，白白浪费了一个多小时。@ResponseBody加在方法上表明是ajax请求。

==========================================================================================

springMvc异常处理：
Web工程中一般都是三层结构，如果系统中无论那一层发送异常都可以直接向上抛出，而不用处理，最后由springmvc前端控制器交由异常处理器进行处理。

自定义异常处理器：
	public class MyExceptionResolver implements HandlerExceptionResolver {
		@Override
		public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler,
				Exception ex) {
			ModelAndView modelAndView = new ModelAndView();
			modelAndView.addObject("message", ex.getMessage());
			modelAndView.setViewName("error.jsp");
			return modelAndView;
		}
	}
	
错误页面里有${message}可以查看错误信息

在springmvc.xml中添加：
<!-- 异常处理器 -->
<bean id="handlerExceptionResolver" class="cn.me.exception.MyExceptionResolver"/>

==========================================================================================

这里的url-pattern表示前端控制器会处理*.action，/*会处理所以，/会处理jsp以外的。

  	<!-- springmvc配置开始 -->
     <servlet>
  	<servlet-name>springmvc</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<!-- 默认会加载/web-inf/{servlet-name}-servlet.xml，修改 -->
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>classpath:springmvc.xml</param-value>
  	</init-param>
  </servlet>
  <servlet-mapping>
  	<servlet-name>springmvc</servlet-name>
  	<url-pattern>*.action</url-pattern>
  </servlet-mapping>
 	<!-- springmvc配置完毕 -->
	
==========================================================================================

//		重定向
return "redirect:list.action"; 
return "redirect:/index.jsp"; //通知浏览器，让浏览器重新发起请求，使用的两个不同的request域
//		请求转发，默认是这个
return "forward:list.action"; 
return "forward:/index.jsp"; 
return "/index.jsp";  //浏览器保留原有的请求地址，使用的是同一个request域		

==========================================================================================

restful风格需要用@PathVariable("thisid")注解，并且修改web.xml的springmvc处理的链接范围。
修改成/后会找不到静态文件如js文件，原因是js文件路径也会被springmvc处理，
但是没有给该路径设置相应的方法，所以会找不到。解决办法是
在springmvc.xml加上 <mvc:resources location="/js/" mapping="/js/**"> </mvc:resources>，
可以同时加上<mvc:resources location="/css/" mapping="/css/**"> </mvc:resources>，
<mvc:resources location="/fonts/" mapping="/fonts/**"> </mvc:resources>等，
location表示链接，表示可以处理/js/，mapping表示文件路径，**表示多个层级，

使用/js/1/a.js，/js/b.js测试，发现
location="/js/" mapping="/js/*"找得到b，找不到a；
location="/js/**" mapping="/js/**"都找得到；
location="/js/*" mapping="/js/*"都找不到；
location="/js/" mapping="/js/**"都找得到；


	@RequestMapping("/itemEdit/{thisid}")
	public String editItemRestful(@PathVariable("thisid") int iid,Model model) throws Exception{
		System.out.println(iid);
		Items i = itemService.findByID(iid);
		if(i==null){
			throw new Exception("没有找该到id");
		}
		model.addAttribute("item", i);
		return "editItem";
	}
	
	
==========================================================================================

@RequestParam(value="id")  int iid表示页面的id属性赋值给iid，
形参名字如果和页面的id属性一样，不用加这个注解。

	@RequestMapping("/itemEdit")
	public String editItem(@RequestParam(value="id") int iid,Model model) throws Exception{
		System.out.println(iid);
		Items i = itemService.findByID(iid);
		model.addAttribute("item", i);
		return "editItem";
	}
	
@RequestParam(value="id",required=false,defaultValue="1")表示不是必须传id过来，不传的话id默认是1(required默认值是true)

==========================================================================================

创建拦截器处理类，代码如下：(preHandle返回true表示放行，false不放行)
package cn.itcast.ssm.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

public class MyIterceptor1 implements HandlerInterceptor{

	@Override
	public boolean preHandle(HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse,
			Object paramObject) throws Exception {
		// TODO Auto-generated method stub
		System.out.println(this.getClass().getName()+"前置方法");
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse,
			Object paramObject, ModelAndView paramModelAndView) throws Exception {
		// TODO Auto-generated method stub
		System.out.println(this.getClass().getName()+"中间方法");
	}

	@Override
	public void afterCompletion(HttpServletRequest paramHttpServletRequest,
			HttpServletResponse paramHttpServletResponse, Object paramObject, Exception paramException)
			throws Exception {
		// TODO Auto-generated method stub
		System.out.println(this.getClass().getName()+"后面方法");
	}
}
复制粘贴一份，取名MyIterceptor2，在springmvc加上如下配置。开启拦截器，
	
<!-- 拦截器配置 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="cn.itcast.ssm.interceptor.MyIterceptor1"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="cn.itcast.ssm.interceptor.MyIterceptor2"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
可以发现访问一个页面拦截器触发了多次，
测试发现是载入静态资源(上面列子的a.js和b.js)也触发了拦截器。

==========================================================================================

使用拦截器拦截未登录用户，一般不用这个而是用框架判断，例如shiro：
先判断当前方法的名字，如果是某特定方法(如登陆方法，这里是showList2方法)，
直接放行，这个方法里有设置session的 user，相当于登陆成功。
如果不是该方法，则判断session是否有user，没有则去error.jsp，否则放行。测试发现没问题

public class MyIterceptor1 implements HandlerInterceptor{

	@Override
	public boolean preHandle(HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse,
			Object paramObject) throws Exception {

		String name = h.getMethod().getName();
		System.out.println("name="+name);
		if("showList2".equals(name)){
			return true;
		}
		
		Object u = paramHttpServletRequest.getSession().getAttribute("user");
		HandlerMethod h=(HandlerMethod) paramObject;
		if(u!=null){
			System.out.println(this.getClass().getName()+"前置方法");
			return true;
		}
		
		String servletPath = paramHttpServletRequest.getContextPath();
		System.out.println("servletPath="+servletPath);
		paramHttpServletRequest.getRequestDispatcher("/WEB-INF/jsp/error.jsp")
			.forward(paramHttpServletRequest, paramHttpServletResponse);

		return false;
	}
	......
}


==========================================================================================

@RequestBody把json字符串转成java对象，要求属性名字一样。
https://jingyan.baidu.com/article/624e7459069f4034e8ba5a87.html
@ResponseBody把返回的对象转成json，不用手动gson.tojson(对象)。

==========================================================================================

注意不要出现路径重复的现象。比如某页面是/search.html，自动调用angularjs的方法访问/search，
这样会报错请求参数错误。原因应该是/search.html的.html被当成参数了。

==========================================================================================

