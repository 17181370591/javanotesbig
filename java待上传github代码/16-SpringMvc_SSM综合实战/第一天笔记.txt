springMVC第一天
一、springMVC的简介
表现层框架：servelet--->struts2------->springmvc
核心前端控制器：dispatcherServlet
springMVC是spring家族的一个小模块

二、入门程序
场景：浏览器输入 list.action 跳转到一个商品列表页面
步骤：
1、创建web工程
2、添加jar：springMVC、spring、junit
3、在web.xml中添加一个DispatcherServlet 需要初始化一个springMVC容器
4、添加springmvc.xml
5、创建一个商品pojo
6、创建一个商品的Controller
    传统方式：实现一个Controller接口 
    注解方式：添加一个@Controller标签
7、把Controller配置到springmvc.xml中（传统方式）
   开启包扫描（注解方式）
8、创建一个jsp页面
9、tomcat测试

三、springmvc的完整架构
springmvc三大核心组件
1、处理器映射器
   HandlerMapping：
      org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping（传统开发方式）
      org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping（过时的注解开发方式）
      org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping（最新版本的注解开发方式）
2、处理器适配器
   HandlerAdapter：
     org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter（传统开发方式）
     org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter（过时的注解开发方式）
     org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter（最新版本的注解开发方式）
3、注解驱动 <mvc:annotation-driven/>  代替了上述两个
4、视图解析器
   ViewResolver：
     org.springframework.web.servlet.view.InternalResourceViewResolver

四、springmvc和mybatis整合
1、整合思路：
持久层
   sqlMapConfig.xml(可以为空、可以不存在)
   applicationContext-dao.xml
     数据源
     sqlSessionFactory
       数据源
       别名
     mapper扫描器
业务层
   applicationContext-service.xml
     事务
     包扫描器  @Service
表现层  
    springmvc.xml
      包扫描器 @Controller
      注解驱动 <mvc:annotation-driven/>
      视图解析器
web.xml
  前端控制器：初始化springmvc容器
  监听器：初始化spring容器

2、开发步骤
   创建数据库
   创建web工程
   添加jar：mybatis、mybatis扩展包、spring、mybatis和spring整合包、junit、springmvc
   添加配置文件
   持久层开发：代码使用逆向工程
   业务层开发：接口+实现类
   表现层开发：注解开发方式

五、springmvc接收参数（绑定）
1、默认绑定
    HttpServletRequest request, 
    HttpServletResponse response,
    HttpSession session,
    Model model
2、基础数据类型 规则：页面参数的名字和形参中的名字保持一致
     @RequestParam(value="id",required=false,defaultValue="1")
3、绑定pojo
    解决乱码问题：
       post：解决方式是在web.xml中添加过滤器
         <filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
           
       get：解决方式两种
        1、String name = new String(item.getName().getBytes("iso-8859-1"),"utf-8");
        2、直接修改tomcat的编码
	
4、绑定包装的pojo

5、自定义转化器 需要实现接口Converter
   @DateTimeFormat(pattern = "yyyy-MM-dd")


六、springmvc和struts2的区别
1、前端控制器不一样 前者使用servlet，后者使用的是filter
2、接收参数的方式不一样，前者使用是形参直接绑定参数，后者使用的是属性驱动、模型驱动、对象驱动
3、在项目前者的Controller类一样是单例，后者action都是多例

