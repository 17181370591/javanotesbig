1、准备一个空仓库，复制粘贴后访问该仓库，用如下方法删除数据即可：
	1)documents type 选择 XML 
	2)documents 输入下面语句
	<delete><query>*:*</query></delete>
	<commit/>
	
	
2、导包：
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-solr</artifactId>
			<version>1.5.5.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-solrj</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.2</version>
		</dependency>

		
3、创建字段和域：
	修改 Solrhome 的 schema.xml 文件，配置一个 FieldType，使用 IKAnalyzer
	<fieldType name="text_ik" class="solr.TextField">
		 <analyzer class="org.wltea.analyzer.lucene.IKAnalyzer"/>
	</fieldType>
	
	配置域：域相当于数据库的表字段，用户存放数据，因此用户根据业务需要去定义相关的Field（域），
	一般来说，每一种对应着一种数据，用户对同一种数据进行相同的操作。	域的常用属性：
		name：指定域的名称
		type：指定域的类型
		indexed：是否索引
		stored：是否存储
		required：是否必须
		multiValued：是否多值

	配置域：修改solrhome的schema.xml 文件  设置业务系统 Field
		<field name="item_goodsid" type="long" indexed="true" stored="true"/>
		<field name="item_title" type="text_ik" indexed="true" stored="true"/>
		<field name="item_price" type="double" indexed="true" stored="true"/>
		<field name="item_image" type="string" indexed="false" stored="true" />
		<field name="item_category" type="string" indexed="true" stored="true" />
		<field name="item_seller" type="text_ik" indexed="true" stored="true" />
		<field name="item_brand" type="string" indexed="true" stored="true" />	
		
	配置复制域：复制域的作用在于将某一个Field中的数据复制到另一个域中
	<field name="item_keywords" type="text_ik" indexed="true" stored="false" multiValued="true"/>
	<copyField source="item_title" dest="item_keywords"/>
	<copyField source="item_category" dest="item_keywords"/>
	<copyField source="item_seller" dest="item_keywords"/>
	<copyField source="item_brand" dest="item_keywords"/>

	配置动态域：当我们需要动态扩充字段时，我们需要使用动态域。对于品优购，规格的值是不确定的，
	所以我们需要使用动态域来实现。需要实现的
		<dynamicField name="item_spec_*" type="string" indexed="true" stored="true" />	

	似乎修改域后需要清空索引并重新生成，否则无效。
4、配置pojo类和solr字段的映射，见 TbItem.java
	 @Field 注解
	创建 cn.itcast.pojo 包，将品优购的TbItem实体类拷入本工程  ,属性使用@Field注解标识 。   如果属性与配置文件定义的域名称不一致，需要在注解中指定域名称。
	
5、spring配置文件见 applicationContext-solr.xml

6、各自代码见 SolrTest.java

7、classes文件夹里的文件放在tomcat对应位置，里面的ext加入了一些电商的常见词，
	stopword加入7000个常见汉字，目的是避免查询单个汉字。
	
8、性能优化：

    尽量将所有仅用于搜索，而不用于实际返回的字段设置stored="false"；

  - 尽量将所有仅用于返回，而不用于搜索的字段设置indexed="false"；

  - 去掉所有不需要的copyField 语句；

  - 为了达到最佳的索引大小和搜索性能,对所有的文本字段设置indexed="false"，

    使用copyField将他们拷贝到“整合字段”name="text"的字段中，使用整合字段进行搜索；

  - 使用server模式来运行JVM,同时将log级别调高, 避免输出所有请求的日志。
	 注意: 为了节省空间,这个字段默认不被索引, 因使用copyField被拷贝到了名为text的字段中 ，用于内容返回和高亮。搜索时使用text字段

	 <fieldname="content" type="text_general"indexed="false"  stored="true"multiValued="true"/>

	  整合字段(copyfiled ), 包含其他可搜索的字段，当整合字段包含多个需要被索引的字段时multiValued="true“必须设置为true

	<field name="text" type="text_general"indexed="true"  stored="false"multiValued="true"/>

	  拷贝需要索引的字段到整合字段中

	     <copyField source="title" dest="text"/>
	   <copyField source="author" dest="text"/>
	   <copyField source="description"dest="text"/>
	   <copyField source="keywords"dest="text"/>
	   <copyField source="content"dest="text"/>

	原文：https://blog.csdn.net/u011066470/article/details/52047433 


