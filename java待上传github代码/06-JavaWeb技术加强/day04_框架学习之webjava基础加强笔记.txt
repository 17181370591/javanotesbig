动态代理：https://www.cnblogs.com/xdp-gacl/p/3971367.html

  					    基础加强


今日内容:
	 1  使用动态代理解决网站字符集编码 ---动态代理(Spinrg底层封装)
				---理解思想
	 
	 2  模仿 @Test 功能的执行--注解
				---只要会用
		

	



案例一使用动态代理解决网站字符集编码

需求:
      之前做统一字符集编码使用了装饰者模式
      那今天要使用动态代理的方式达到同样的效果


技术分析: 动态代理


	面试题: 问 增强一个对象的方法有几种方式?

			 1 继承
			          条件: 得知道要继承的类是谁


			 2 装饰者模式
				
				不需要知道父类是谁 只需要知道接口即可
				
				条件:
					1 装饰者和被装饰需要实现同一个接口
					2 装饰者有被装饰者的引用

					100方法---适配器类

				缺点: 工作量大


			
			
			
			3 动态代理 
				代理的概念: 图
				
				条件:
					1 必须得知道要被代理的类/对象是谁

			
			动态代理:动态的给我们生成代理类/代理对象
					动态: 这个东西我们不用写,java已经给我们提供好了
			JDK的动态代理:
			Proxy.newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) 
					返回一个指定接口的代理类实例 	
					
			
			扩展: CGLIB的动态代理(导包)

				
			要求:
				1 动态里的概念和作用
				2 JDK的动态代理方式代码能写出来 (案例写出来)
							// 后期的框架是封装好的 但是建议写出来

		

		细节1 :
			proxyPerson.run(); // 执行这个方法  invoke都会执行一遍   执行的内容就是针对该方法的增强

		细节4:
			判断 只对某个方法增强 别的方法不增强

		细节2:
			返回值 return  谁调用返回给谁 返回的内容就是最终值

		细节3:
			参数的问题

		
	

		总结: 给我一个对象.我就可以对这个对象的接口所有方法进行增强


------------------------------------------------------------------------------------------------------

案例二-模拟单元测试的执行
需求
      自己定义一个注解,实现出和 @Test 一样的功能 
		
      
 技术分析: 注解  
	
	什么是注解?
		由@+一对英文字符组成的东西 就都是注解

		
	  
	  
	注解的作用?
		
		注释: 都是给程序员看的
		注解: 给程序自己去看的

		作用: 告诉程序,当前怎么样执行功能

		

	
	注解的使用?
		jdk三个常用注解:
				@Override  标记方法重写
				@SuppressWarnings  压制警告
				@Deprecated  标记方法过时

		
		@Override    标记方法重写
			功能:会在程序的预编译阶段进行重写检查，
			如果发现方法不是重写，那么在预编译时期报错

			注意: 这个注解只能标记在方法上


对于注解: 我们只要拿过来用即可(重点)
		1 当前注解的作用 
		2 该注解可以标记在哪些地方




对于注解的底层  ---研发(架构师)	 --了解


		
	        @SuppressWarnings   压制警告
			    取值:
				unchecked:忽略安全检查
				unused:忽略不使用
				null:忽略空指针
				all:忽略所有
			     
			     一般只使用: @SuppressWarnings(value="all")


			  功能 :会在程序的预编译阶段进行警告的压制
			  可以标注方法，变量，类上
			 
			 压制警告的使用：
			  		开发时，要把所有的警告压制，防止被警告打乱开发思路
			  		
			  		测试时，要把压制警告去掉，警告机制开启，这样方便测试




			@Deprecated	标记方法过时
			特点:
			告知程序我的这个方法是过时，如果有程序员调用这样的过时方法，会做方法上做删除的提示


			方法上定义

			
			 


以下内容都是扩展内容,仅需了解:

对于注解我们只要会用---开发阶段	
注解的定义和注解的属性---研发阶段 

自定义注解:
         注解的本质:接口	
	 注解的属性名--接口方法的方法名
	 注解的属性值--接口方法的返回值

	出生的目的: 就是为替代xml
		以后的开发都是xml+注解


框架中:	我们只要拿过来用即可(重点)
		1 当前注解的作用 
		2 该注解可以标记在哪些地方



案例: 不用做
自定义注解的使用步骤:
 1 定义一个注解   ---------------研发的

 2 使用注解       ---------------开发的


 3 让程序解析注解,执行功能 ------------研发的 
	 反射代码



元注解: 修饰注解的注解就叫元注解
@Target: 该注解可以放在那些地方

@Retention: 指定注解在什么时间有效



-----------------------------------------------------------------------------------------------------

面试题:类加载器(了解):
	什么是类加载?
		class文件加载到内存中形成Class对象,这个过程就是类加载
		做这件事情的东西就是类加载器




类加载器的组成:	 
	引导类加载器(负责加载 rt.jar)
	扩展类加载器(负责加载 ext\*.jar)
	应用类加载器(负责加载 自己编写的类)
	
	
面试题: 如何保证一个类 只被加载一次的?

全盘负责托管机制
	    作用: 一个类 只加载一次

	    原理:

		拿Demo类来说: 要加载了

		1 应用类加载器拿到了Demo.class文件,但是没有做任何的事情,给了扩展类加载器
		2 扩展类加载器拿到了Demo.class文件,但是没有做任何的事情,给了引导类加载器
		3 引导类加载器拿到了Demo.class文件,它把属于它的内容给加载了,把剩下的给扩展类加载器
		4 扩展类加载器拿到剩下的,它把属于它的内容给加载了,把最终的部分给了应用类加载器
		5 应用类加载器拿到最终剩下的全部加载


		每个类加载器只加载自己的部分










	













		