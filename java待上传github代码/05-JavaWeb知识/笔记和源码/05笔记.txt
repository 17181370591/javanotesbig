
实现点击验证码更新的方法：加上参数后就不会用缓存了
 <img  src='/day08/cs' id="aa1" />
<script type="text/javascript">
    var a=document.getElementById("aa1");
    window.onload=function(){
		a.onclick=function(){
			console.log(2);
			a.setAttribute("src", '/day08/cs?t='+new Date());
			//a.src='/day08/cs?t='+new Date();
		}
    }
</script>






注意：utf-8和iso-8859-1不能修改，例如用UTF8，有时候可以用，但有时候出问题且不报错，所以千万别用

服务器发送给客户端汉字乱码：
服务器默认使用iso-8859-1的编码方式，客户端浏览器会自动识别编码方式，但无法自动识别iso-8859-1，
服务器设置s.setHeader("content-type", "text/html;charset=uft-8")后似乎就会按gbk编码并告知
客户端编码方式，从而解决乱码问题。charset=gbk同理。但charset=iso-8859-1会失败。

客户端发送给服务器汉字乱码：
浏览器通过utf-8编码s1以服务器收到utf-88编码后的字符串s2并默认用iso-8859-1解码，得到s3.
所以要得到s1，需要先用iso-8859-1编码s3得到s2，再用utf-8解码s2得到s1。有两种方法：
1：：：new String(s3.getBytes("iso-8859-1"), "utf-8");
2：：：URLDecode.decode(URLEncode.encode(s3,"iso-8859-1"), "utf-8");

客户端下载文件名汉字乱码：
大部分浏览器默认编码方式utf-8，所以文件名需要用utf-8编码后传过去，
即URLEncode.encode(文件名, "utf-8");

public void doGet(HttpServletRequest r, HttpServletResponse s) throws ServletException, IOException {
		s.setHeader("content-type", "text/html;charset=gbk");
		//s.setHeader("content-type", "text/html;charset=utf-8");
		String z = "傻逼123";
		String a = r.getParameter("u1");
		System.out.println("a=" + a);
		System.out.println("aaa=" + new String(a.getBytes("iso-8859-1"), "utf-8"));
		System.out.println(z);
		s.getWriter().print(z);
	}
	

	
	
	
	
//通过getParameterMap()获取request的所有parameter的key和value，并赋值给user的同名项；
	Map<String, String[]> m = r.getParameterMap();
		for (Object x : m.keySet()) {
			System.out.println(x + ":" + m.get(x));
		}
		User user = new User();
		try {
			BeanUtils.populate(user, m);

		} catch (IllegalAccessException | InvocationTargetException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		

		
		

r是request，下面的代码是请求转发，把请求抛给"/form.jsp"处理，实现一次访问内不同页面的数据交换
r.getRequestDispatcher("/form.jsp").forward(r, s);













Listen：
3大对象创建，销毁的监听
servletContext：ServletContextListener 
request：ServletRequestListener
session：HttpSessionListener

3大对象的属性，设置修改和删除的监听，设置返回设置后的value，修改删除返回操作前的value
servletContext： ServletContextAttributeListener
request：ServletRequestAttributeListener
session：HttpSessionAttributeListener

上面的方法需要在web.xml配置classname，下面的方法需要在监听的对象的类里实现接口

HttpSessionBindingListener：
valueUnbound：解绑方法。例如session.setAttribute时会触发此方法和session的添加/修改方法
valueUnbound：绑定方法。例如session.removeAttribute时会触发此方法和session的删除方法
request.removeAttribute时不会触发此方法。

HttpSessionActivationListener（Serializable）：
sessionWillPassivate：服务器正常关闭时，session.setAttribute里的值会被保存到磁盘，称为钝化；
sessionDidActivate：打开时会读取磁盘保存的session.setAttribute的值，称为活化；
如果这个值是类的对象，且该类实现了HttpSessionActivationListener，那么会触发钝化的监听方法；
如果实现了Serializable，会触发活化的监听方法，如果不实现序列化会无法被保存（钝化监听会触发）
